#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
lm: list movies, a command-line tool
\end_layout

\begin_layout Abstract
*lm* is a command-line software that lists movies, loosely inspired from
 ls.
 Extra features allow you to download subtitles, and interact with the opensubti
tles hash database.
 *lm* is not english oriented, and can provide information for all filenames.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
History
\end_layout

\begin_layout Standard
he starting point of this little project is here from Goffi (http://www.goffi.org)
 at Goffi's website.
 The idea was to build a terminal tool to list/filter/sort movies in current
 directory, using IMDbPy module [LINK] to get all metadata information.
 When I saw the script, few months ago, I just made some modifications I
 though useful like displaying results in an html page with links to trailers,
 etc...
 Little by little, *lm* became a great tool to keep a track of files without
 too much effort.
\end_layout

\begin_layout Subsection
Brief features overview
\end_layout

\begin_layout Standard
Here is a short list of what you can do with *lm*:
\end_layout

\begin_layout Itemize
list all movie files in current directory (recursive search) in your terminal
\end_layout

\begin_deeper
\begin_layout Itemize
filter by genre, actor, country, file size
\end_layout

\begin_layout Itemize
sort by name, rating
\end_layout

\end_deeper
\begin_layout Itemize
export this list to an html view
\end_layout

\begin_deeper
\begin_layout Itemize
with cover
\end_layout

\begin_layout Itemize
link to trailers and IMDb page
\end_layout

\end_deeper
\begin_layout Itemize
download subtitles in any languages (source opensubtitles)
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Standard
*lm* uses IMDbPY module to gather movies metadata, and opensubtitles hash
 database through xmlrpclib (in standard python library)
\end_layout

\begin_layout Subsubsection*
IMDbPy (required)
\end_layout

\begin_layout Standard
web page: http://imdbpy.sourceforge.net/ 
\end_layout

\begin_layout Standard
Check the very complete official download page http://imdbpy.sourceforge.net/downl
oads.html, you will probably see it available in the package repository of
 your distribution.
 Some un/official installers are built for Mac Os X and Windows.
\end_layout

\begin_layout Standard
IMDbPY requires 'lxml' module to speed up parsing.
 If it's not installed, be sure to have BeautifulSoup http://www.crummy.com/softwa
re/BeautifulSoup/instead.
 
\end_layout

\begin_layout Standard
Note: If you want to go through the source install, you can just select
 the minimal configuration.
\end_layout

\begin_layout Subsubsection*
colorama (optional, for windows users only)
\end_layout

\begin_layout Standard
web page: http://pypi.python.org/pypi/colorama
\end_layout

\begin_layout Standard
lm is mainly designed to return result on a terminal, as 'ls' function.
 to 'map' terminal coloration on the windows terminal, please install the
 following package
\end_layout

\begin_layout Section
Features in details
\end_layout

\begin_layout Subsection
Basic calls
\end_layout

\begin_layout LyX-Code
python lm.py YOUR_DIR_TO_SCAN
\end_layout

\begin_layout Section
Miscellaneous
\end_layout

\begin_layout Standard
0 ----- WTF ? -----------------------------------------------------------------
\end_layout

\begin_layout Standard
lm lists movie files, getting information on IMDb, allowing you to: - display
 sexy titles (instead of often unreadable filename) in terminal - display
 custom info (outline, actor ...) - sort by rating - display a global view
 on an html page with cover and trailer links - download subtitles for all
 your movies - share your info, and upload the couple of info (moviehash,imdb_id
) to opensubtitles database
\end_layout

\begin_layout Standard
Remark: lm description part is not english oriented.
 Matchs are done through file hash, or non original titles.
\end_layout

\begin_layout Standard
Examples: python lm.py YOUR_DIR_TO_SCAN -f @genre:action will list all your
 action movies
\end_layout

\begin_layout Standard
python lm.py YOU_DIR_TO_SCAN -s -a will display in an HTML page, your movies
 sorted alphabetically
\end_layout

\begin_layout Standard
python lm.py YOU_DIR_TO_SCAN --download ger will download the 3 best subtitles
 match, for every movie in you dir
\end_layout

\begin_layout Standard
2 ----- How to use it ? -------------------------------------------------------
\end_layout

\begin_layout Standard
2.0 Basic things about scripts and PATH
\end_layout

\begin_layout Standard
lm.py is a simple python script.
 How can I call it? * At you convenience, add python and the folder containing
 lm.py in your path to be able to call it like that: "python lm.py" * You
 can also make this script executable to call it this way "./lm.py" * you
 can make an alias for your terminal: in that case, we recommend to start
 with this default lm call: "lm.py -r @size:500" * Or the hard way, (for
 windows users for exemple): "c:/python/python.exe f:/myscriptfolder/lm.py"
\end_layout

\begin_layout Standard
2.1 How to make it return interesting things?
\end_layout

\begin_layout Standard
As always: "python lm.py --help" will give you syntax details
\end_layout

\begin_layout Standard
DEFAULT CALL python lm.py will analyse the current folder (recursively),
 * build the movie file hash * look fot correspondances in opensubtitles
 database * if nothing found, try to guess title from filename * find best
 match (in all local languages titles)
\end_layout

\begin_layout Standard
result in your terminal (with coloration)
\end_layout

\begin_layout Standard
default behaviour is to scan current directory.
 Of course this command will work as expected: python lm.py target_directory_to_s
creen
\end_layout

\begin_layout Standard
ADVICE: Each time you launch lm, it gets metadata for files it doesn't know,
 which is really slow.
 So, be sure to try on a directory with a few movies to test it.
\end_layout

\begin_layout Standard
2.2 Colors Meanings 
\end_layout

\begin_layout Standard
When displayed in your terminal, titles can have different color: 
\end_layout

\begin_layout Standard
MAGENTA: the best! It means your movie hash matches an opensubtitles known
 movie.
 95% sure to display the right title
\end_layout

\begin_layout Standard
ORANGE : Not bad.
 We did'nt find any match in opensubtitles, but we looked through imdb movies,
 and are quite confident.
 80% chance to display the right title
\end_layout

\begin_layout Standard
ORANGE with RED /|
\backslash
 symbol: We didn't find anything on opensubtitles And we didnt find any
 good match in IMDb results neither.
 We stronly recommend you to manually confirm this movie with the shell
 interactive command: lm.py YOUR_DIR -f @unsure --confirm 2.3 Principal argument
\end_layout

\begin_layout Standard
-l : returns a more complete description, with YEAR, RATE, FILE SIZE -L
 : returns a VERY detailled view with synopsis.
 Ideal for ONE movie.
 python lm.py -L movie_dir/movie_file.avi -f : filter the query (see 2.4) --
 confirm: launch an interactive process to confirm/search movies You will
 be able to confirm found movie (if we are not sure), or provide an imdb
 id, or a title and a year, to find the correct match.
 --download: downloads subtitles for selected movies.
 Subtitles will be written in movies directories with suffixe _LANGUAGE_LM1.srt,
 _LANGUAGE_LM2.srt, ...
 (several subtitles can be downloaded for each movie, depending on their
 popularity) -d : delete selected paths from cache.
 When calling python lm.py YOUR_DIR -d, all movie files in YOUR_DIR will
 be deleted from cache.
 Note: A confirmation is asked before any deletion.
 To delete all cache call: python "lm.py cache -d" HTML DISPLAY -s : will
 open you web browser and display results with rates, cover, links to trailers,
 and IMDb movie page.
\end_layout

\begin_layout Standard
2.4 ----- Filters -------------------------------------------------------------
\end_layout

\begin_layout Standard
you can filter your query using the --filter argument (or the short -f).
 Currently, you can filter on: genre director actor size (bigger than xxMb)
 unsure (movies wich hash not found in opensubtitles, and bad title match
 in imdb results) 
\end_layout

\begin_layout Standard
he syntax is --filter @keyword:filter,filter,filter@keyword2:filter,filter
\end_layout

\begin_layout Standard
e.g.: python lm.py -f "@director:tim burton@genre:drama,fantasy@size:500" python
 lm.py -f @unsure@size:500 Filters are case insensitive.
\end_layout

\begin_layout Standard
2.5 ----- Download Subtitles --------------------------------------------------
\end_layout

\begin_layout Standard
lm download subtitles for all movie files selected.
\end_layout

\begin_layout Standard
Before any downloading, you need to determine the language ISO639 code.
 3 letters (see: http://en.wikipedia.org/wiki/List_of_ISO_639-2_codes)
\end_layout

\begin_layout Standard
python lm.py YOUR_DIR --download eng * will recursively go through YOUR_DIR,
 and search for english subtitles * will write subtitles in every movie
 file directory with syntax moviefilename_ENG_LM1.srt, moviefilename_ENG_LM2.srt
\end_layout

\begin_layout Standard
lm will download up to 3 most downloaded subtitles with preference to subtitles
 that match movie hash.
\end_layout

\begin_layout Standard
3 ----- MECHANISMS -------------------------------------------------------------
\end_layout

\begin_layout Standard
CACHE AND HTML DISPLAY
\end_layout

\begin_layout Standard
Basically, all metadata (text data, not pictures) are stored with pickle
 in the hidden directory ~/.lm/cache_path: storing absolute paths and hashs
 ~/.lm/cache_hash: storing hashs and metadatas
\end_layout

\begin_layout Standard
HTML file (build when -s parameter is used) is stored in: ~/.lm/html_sumup.html
\end_layout

\begin_layout Standard
MOVIE SEARCH
\end_layout

\begin_layout Standard
Since v0.2: 1/ Build hash for file (see: http://trac.opensubtitles.org/projects/ope
nsubtitles/wiki/XMLRPC) 2/ Call opensubtitle through XMLRPC call.
 Do they know this hash? 3/ If yes: -> perfect, we get an imdb_id, GO TO
 4/ Try to guess movie title/year with filename clean filename, omit some
 stop words look for a potential year in the movie filename 5/ Send guessed
 title to IMDB 6/ if we guessed a year, reduce answers to guessed year movies
 7/ find best match on all results, for ALL AKAS (non original title) 8/
 if the best match isn't very good, and if we reduced answer at step 6,
 GOTO 7 with non filtered answers
\end_layout

\begin_layout Standard
REMARK: lm.py is not english oriented at all.
 exemple "sexcrimes.avi" will match "wild things" original title.
\end_layout

\begin_layout Standard
4 ----- CREDIT ----------------------------------------------------------------
\end_layout

\begin_layout Standard
Internet Movie Database (IMDb) is one of the oldest site on Internet, and,
 as its name says, give a lot of informations on movies
\end_layout

\begin_layout Standard
IMDbPY: lm use IMDbPY to get information on IMDb (http://imdbpy.sourceforge.net/),
 many thanks to its authors
\end_layout

\begin_layout Standard
Opensubtitles API through XMLRPC protocol (default python's module xmlrpclib)
 website: http://trac.opensubtitles.org/projects/opensubtitles/wiki/XMLRPC
 You can participate by uploading some 
\end_layout

\begin_layout Standard
Contact:
\end_layout

\begin_layout Standard
Creator: goffi@goffi.org (http://www.goffi.org) v0.2 : polluxxx@gmail.com (http://red
rises.blogspot.com)
\end_layout

\begin_layout Standard
5 ----- CHANGES LOG -----------------------------------------------------------
\end_layout

\begin_layout Standard
What's new in version 0.2
\end_layout

\begin_layout Standard
++ interactive confirmation process ("--confirm" parameter) ++ Subtitles
 downloads ("--download language" parameter) ++ Use of opensubtitles hash
 database to find imdb id ++ Upload (moviehash, imdb_id) to opensubtitles
 ("--upload" parameter) ++ new home designed search algorithm, with YEAR,
 and through all akas (not original title) through all IMDbPY results ++
 HTML display with cover, links to trailer and IMDb page ++ cache deletion
 via -d command (possibility to remove only some filtered file names, lm.py
 -d -f @genre:action) ++ filtering by size (+ and - like @size:+500), and
 by 'unsure' ++ recursive search in directory ++ windows terminal coloration
 ++ change optionparse to argparse
\end_layout

\end_body
\end_document
